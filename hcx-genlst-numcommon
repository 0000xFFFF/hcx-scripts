#!/usr/bin/env python3

import sys

# Settings
YEAR_FROM = 1900
YEAR_TO = 2024

# Common patterns
COMMON_PATTERNS = [
    "12345678", "123456788", "123456789", "1234567890", "1234567899",
    "12345678910", "01234567", "012345678", "0123456788", "0123456789",
    "012345678910", "87654321", "987654321", "10987654321", "11111112",
    "1111122222", "11223344", "44332211", "12348765", "13572468",
    "12344321", "43211234", "5432112345", "1234554321", "69696969",
    "420420420",
]

# Leap year checker
def is_leap_year(year):
    return (year % 400 == 0) or (year % 100 != 0 and year % 4 == 0)

# Maximum days in a month
def max_days_in_month(month, year):
    if month in [1, 3, 5, 7, 8, 10, 12]:
        return 31
    elif month == 2:
        return 29 if is_leap_year(year) else 28
    else:
        return 30

# Print generated passwords
def print_password(s, prefix):
    print(f"{prefix}{s}")

# Main logic
def generate_passwords(prefix):
    # Print common patterns
    for pattern in COMMON_PATTERNS:
        print_password(pattern, prefix)
    
    # Print repetitive patterns
    for x in range(10):
        xs = str(x) * 4
        for y in range(10):
            ys = str(y) * 4
            print_password(f"{xs}{ys}", prefix)
    
    # Print date-based patterns
    for year in range(YEAR_FROM, YEAR_TO + 1):
        year_str = str(year).rjust(4, '0')
        for month in range(1, 13):
            month_str = str(month).rjust(2, '0')
            for day in range(1, max_days_in_month(month, year) + 1):
                day_str = str(day).rjust(2, '0')
                print_password(f"{day_str}{month_str}{year_str}", prefix)  # day + month + year
                print_password(f"{year_str}{month_str}{day_str}", prefix)  # year + month + day
                print_password(f"{month_str}{day_str}{year_str}", prefix)  # month + day + year
                print_password(f"{year_str}{day_str}{month_str}", prefix)  # year + day + month
    
    # Print year + year patterns
    for year1 in range(YEAR_FROM, YEAR_TO + 1):
        for year2 in range(YEAR_FROM, YEAR_TO + 1):
            print_password(f"{year1}{year2}", prefix)

if __name__ == "__main__":
    prefix = sys.argv[1] if len(sys.argv) >= 2 else ""
    generate_passwords(prefix)

