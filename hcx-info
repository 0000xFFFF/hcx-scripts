#!/usr/bin/env python

import sys
import os
import subprocess
from colorama import Fore, Style
from operator import itemgetter
from tabulate import tabulate
import argparse

# Argument parsing
parser = argparse.ArgumentParser(description='Print a table for WPA-PBKDF2-PMKID+EAPOL hashes in file')
parser.add_argument('-s', '--sort', action='store_true', help="Sort output by column")
parser.add_argument('-i', '--sortindex', metavar='clm_num', default=5, type=int, help="Column number to sort (starts with 0) (default: 5 - ESSID)")
parser.add_argument('-v', '--vendor', action='store_true', help="Fetch vendor information for all MACs")
parser.add_argument('-n', '--nohashcat', action='store_true', help="Don't fetch passwords from hashcat")
parser.add_argument('-c', '--nocolor', action='store_true', help="Don't use colors when printing")
parser.add_argument('-g', '--search', metavar='search_str', type=str, help="Search hash by (ESSID, BSSID, MAC, ...) and print line")
parser.add_argument('filename', type=argparse.FileType('r'))
args = parser.parse_args()

# Convert hex string to UTF-8
def hex2str(hex_string):
    try:
        return bytes.fromhex(hex_string).decode('utf-8')
    except ValueError:
        if args.nocolor:
            return "HEX ERROR"
        else:
            return f"{Style.NORMAL}{Fore.RED}HEX ERROR{Style.RESET_ALL}"

# Read the hashes file
with args.filename as file:
    hashes_file_lines = file.read().splitlines()

# Vendor lookup setup
mac2ven_cache = {}
if args.vendor:
    ouifile_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), "mac2ven.lst")
    try:
        with open(ouifile_path, 'r') as ouifile:
            for line in ouifile:
                oui_mac, *oui_ven = line.strip().split("\t")
                if oui_mac:
                    mac2ven_cache[oui_mac] = ' '.join(oui_ven)
    except FileNotFoundError:
        pass

def mac2ven(mac):
    if not args.vendor:
        return ""
    mac_prefix = mac.replace(":", "").replace("-", "").upper()[:6]
    return mac2ven_cache.get(mac_prefix, "")

# Hashcat processing
hashcat_items = {}
if not args.nohashcat:
    try:
        result = subprocess.run(['hashcat', '-m', '22000', '--show', args.filename.name],
                                stdout=subprocess.PIPE, stderr=subprocess.STDOUT, text=True)
        for line in result.stdout.splitlines():
            if line:
                parts = line.split(":")
                if len(parts) >= 5:
                    hashcat_items[parts[0]] = parts[4]
    except subprocess.SubprocessError as e:
        print(f"Error running hashcat: {e}")

# Process hash lines
items = []
for line in hashes_file_lines:
    if not line:
        continue
    split = line.split("*")
    if len(split) < 6:
        print("Invalid format")
        exit()
    type_str = "PMKID" if split[1] == "01" else "EAPOL" if split[1] == "02" else ""
    bssid, mac, essid = split[3], split[4], hex2str(split[5])
    passwd = hashcat_items.get(line.split("*")[2], "")
    vendor_ap = mac2ven(bssid)
    vendor_client = mac2ven(mac)
    items.append([line, type_str, split[2], bssid, mac, essid, passwd, vendor_ap, vendor_client])

# Search functionality
if args.search:
    search_term = args.search.lower()
    for item in items:
        if any(search_term in str(clm).lower() for clm in item):
            print(item[0])
    quit()

# Sorting
if args.sort:
    items = sorted(items, key=itemgetter(args.sortindex))

# Color and print output
data = []
counter = 0
for item in items:
    counter += 1
    if args.nocolor:
        data.append([str(counter), item[1], item[2], item[3], item[4], item[5], item[6], item[7], item[8]])
    else:
        data.append([
            f"{Style.NORMAL}{Fore.YELLOW}{counter}{Style.RESET_ALL}",
            f"{Style.NORMAL}{Fore.GREEN}{item[1]}{Style.RESET_ALL}",
            f"{Style.NORMAL}{Fore.GREEN}{item[2]}{Style.RESET_ALL}",
            f"{Style.NORMAL}{Fore.MAGENTA}{item[3]}{Style.RESET_ALL}",
            f"{Style.NORMAL}{Fore.BLUE}{item[4]}{Style.RESET_ALL}",
            f"{item[5]}",
            f"{Style.NORMAL}{Fore.RED}{item[6]}{Style.RESET_ALL}",
            f"{Style.NORMAL}{Fore.MAGENTA}{item[7]}{Style.RESET_ALL}",
            f"{Style.NORMAL}{Fore.BLUE}{item[8]}{Style.RESET_ALL}"
        ])

print(tabulate(data, headers=["#", "TYPE", "HASH", "MAC AP", "MAC CLIENT", "ESSID", "PASSWORD", "VENDOR AP", "VENDOR CLIENT"]))

